{"version":3,"sources":["conversion/convert.js","App.js","serviceWorker.js","index.js"],"names":["convert","formula","substr","replace","val","concat","toLowerCase","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","e","setState","target","value","asciiFormula","state","react_default","a","createElement","id","onChange","react_mathjax","Context","Node","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAAeA,EAAA,SAAAC,GASb,MARmB,MAAfA,EAAQ,KAAYA,EAAUA,EAAQC,OAAO,IAKjDD,GADAA,GADAA,GADAA,GADAA,EAAUA,EAAQE,QAAQ,0BAA2B,SACnCA,QAAQ,KAAM,MACdA,QAAQ,cAAe,SAAAC,GAAG,MAAI,GAAAC,OAAGD,GAAME,iBACvCH,QAAQ,MAAO,OACfA,QAAQ,gBAAiB,WCsB9BI,cAvBb,SAAAA,IAAe,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAIFI,YAAc,SAAAC,GACZR,EAAKS,SAAS,CAAEhB,QAASe,EAAEE,OAAOC,MAAOC,aAAcpB,EAAQgB,EAAEE,OAAOC,UAJxEX,EAAKa,MAAQ,CAAEpB,QAAS,GAAImB,aAAc,IAF7BZ,wEAUb,OACEc,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OACRH,EAAAC,EAAAC,cAAA,gBACEF,EAAAC,EAAAC,cAAA,SAAOE,SAAUf,KAAKI,YAAaI,MAAOR,KAAKU,MAAMpB,UACrDqB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACG,EAAA,EAAQC,QAAT,KACEN,EAAAC,EAAAC,cAACG,EAAA,EAAQE,KAAT,KAAelB,KAAKU,MAAMD,uBAjBlBU,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e3bc025c.chunk.js","sourcesContent":["export default formula => {\n  if (formula[0] === '=') formula = formula.substr(1) // Removes the = in the beginning\n  formula = formula.replace(/([A-Z]{1,3}[0-9]{1,5})/g, '\"$1\"') // Cell => Text\n  formula = formula.replace(/,/g, '.') // , => . (asciimath uses point to indicate decimal places)\n  formula = formula.replace(/([A-Z]+)\\(/g, val => `${val}`.toLowerCase()) // Excel functions to lowerCase\n  formula = formula.replace(/\\*/g, 'xx') // * => x (times)\n  formula = formula.replace(/exp\\((.*?)\\)/g, '(e^$1)') // EXP => e^exponent\n  // Bug: if what's inside EXP has parentesis the app will misbehave\n  // One way to avoid this bug is to write EXP(1)^(the power)\n  return formula\n}","import React, { Component } from 'react'\nimport MathJax from '@matejmazur/react-mathjax'\nimport convert from './conversion/convert'\n\nclass App extends Component {\n  constructor () {\n    super()\n    this.state = { formula: '', asciiFormula: '' }\n  }\n\n  handleInput = e => {\n    this.setState({ formula: e.target.value, asciiFormula: convert(e.target.value) })\n  }\n\n  render () {\n    return (\n      <div id='App'>\n      <h1>Hi</h1>\n        <input onChange={this.handleInput} value={this.state.formula} />\n        <br/>\n        <MathJax.Context>\n          <MathJax.Node>{this.state.asciiFormula}</MathJax.Node>\n        </MathJax.Context>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}